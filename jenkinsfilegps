pipeline {
    agent any

    environment {
        PATH = "C:/Program Files/Docker/Docker/resources/bin:"
        DOCKER_CREDENTIALS_ID = 'docker-credentials-id'
        GIT_REPO_URL = 'https://github.com/spring-petclinic/spring-petclinic-microservices'
        GIT_BRANCH = 'main'
        DOCKER_REGISTRY = 'your-docker-registry'
    }

    stages {
        stage('Checkout') {
            steps {
                git branch: "${GIT_BRANCH}", url: "${GIT_REPO_URL}"
            }
        }

        stage('Build') {
            steps {
                script {
                    sh './mvnw clean install'
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    sh './mvnw test'
                }
            }
        }

        stage('Build Docker Images') {
            steps {
                script {
                    def services = [
                        'config-server',
                        'discovery-server',
                        'customers-service',
                        'visits-service',
                        'vets-service',
                        'api-gateway',
                        'admin-server'
                    ]
                    for (service in services) {
                        def servicePath = "./spring-petclinic-${service}"
                        if (fileExists("${servicePath}/Dockerfile")) {
                            docker.build("${env.DOCKER_REGISTRY}/${service}", servicePath)
                        } else {
                            error("Dockerfile not found in ${servicePath}")
                        }
                    }
                }
            }
        }

        stage('Push Docker Images') {
            steps {
                script {
                    docker.withRegistry("https://${DOCKER_REGISTRY}", "${DOCKER_CREDENTIALS_ID}") {
                        def services = [
                            'config-server',
                            'discovery-server',
                            'customers-service',
                            'visits-service',
                            'vets-service',
                            'api-gateway',
                            'admin-server'
                        ]
                        for (service in services) {
                            docker.image("${env.DOCKER_REGISTRY}/${service}").push()
                        }
                    }
                }
            }
        }

        stage('Deploy with Ansible') {
            steps {
                script {
                    // Asume que tienes un playbook de Ansible configurado para desplegar los contenedores Docker
                    sh 'ansible-playbook -i your_inventory_file deploy.yml'
                }
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                script {
                    // Aplica los archivos de configuraci√≥n de Kubernetes
                    sh 'kubectl apply -f k8s/'
                }
            }
        }

        stage('Monitoring Setup') {
            steps {
                script {
                    // Suponiendo que tienes configuraciones de Grafana y Prometheus listas para ser aplicadas
                    sh 'kubectl apply -f monitoring/'
                }
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            mail to: 'you@example.com',
                 subject: "Pipeline failed: ${currentBuild.fullDisplayName}",
                 body: "Something went wrong with the build. Please check the Jenkins job."
        }
    }
}
